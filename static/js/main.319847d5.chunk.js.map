{"version":3,"sources":["components/Title/Title.tsx","components/Menu/Menu.tsx","services/TimeService.ts","components/Clock/Clock.tsx","components/Dock/Dock.tsx","pages/Home/Home.tsx","pages/Feedback/Feedback.tsx","pages/UrlEncoder/UrlEncoder.tsx","pages/Regex/Regex.tsx","pages/NotFound/NotFound.tsx","pages/TimeConverter/TimeConverter.tsx","pages/Generators/Generators.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","item","useEffect","document","title","localStorage","setItem","window","location","pathname","React","createElement","component","Menu","menuItems","isOpen","onMenuItemClicked","Stack","className","style","display","length","map","i","StackItem","grow","to","path","onClick","DefaultButton","iconProps","iconName","Text","variant","timeService","_handlers","Second","Minute","Hour","subscribe","event","delegate","existingIndex","indexOf","push","unsubscribe","id","splice","notify","newTime","forEach","initialWait","Date","getMilliseconds","setTimeout","setInterval","now","getSeconds","getMinutes","Clock","useState","hasClockData","hours","minutes","seconds","part","time","setTime","subscriptionId","updateTime","getHours","toString","padStart","Label","Dock","dockItems","onMenuClicked","horizontal","horizontalAlign","tokens","childrenGap","shrink","Home","Feedback","href","target","UrlEncoder","mode","encodeValue","decodeValue","results","canProcess","state","setState","_canProcess","retVal","trim","TextField","label","multiline","value","rows","onChange","e","newValue","readOnly","Dropdown","dropdownWidth","selectedKey","newMode","key","options","text","PrimaryButton","disabled","decodeURIComponent","decodeURI","encodeURIComponent","encodeURI","err","error","message","Regex","pattern","input","replacement","RegExp","m","exec","JSON","stringify","test","replace","old","NotFound","DefaultTimeZone","getTime","date","designator","year","getFullYear","month","getMonth","day","getDate","hour","minute","second","timeZone","TimeConverter","TimeZones","require","convertedTime","setConvertedTime","currentTime","setCurrentTime","userTime","setUserTime","useCurrentTimeAsSource","getTimeZoneOptions","tz","updateConvertedTime","useCallback","sourceTime","targetTimeZone","conversionOptions","undefined","timeString","toLocaleString","timeMatch","groups","parsedHours","parseInt","console","log","newCurrentTime","Toggle","checked","ev","newUseCurrentTimeAsSource","verticalAlign","ComboBox","allowFreeform","useComboBoxAsMenuWidth","option","Number","isNaN","newUserTime","hidden","d","autoComplete","newState","AlphaLowerChars","AlphaUpperChars","NumericChars","SpecialChars","DefaultSpecialChars","MaxLength","getOccurrences","char","Generators","includeAlphaLower","setIncludeAlphaLower","includeAlphaUpper","setIncludeAlphaUpper","includeNumeric","setIncludeNumeric","includeSpecial","setIncludeSpecial","allowedSpecialChars","setAllowedSpecialChars","numberOfCharacters","setNumberOfCharacters","numberOfMilliseconds","setNumberOfMilliseconds","generatedValue","setGeneratedValue","isGenerating","setIsGenerating","generate","timeout","allowedChars","concat","alphaChars","lowerChar","upperChar","getAllowedChars","warn","endTime","setMilliseconds","forceBreak","Math","floor","random","occurrences","round","onText","offText","marginBottom","TagPicker","selectedItems","c","name","onResolveSuggestions","filterText","Promise","resolve","filter","includes","items","x","SpinButton","labelPosition","Position","top","min","step","randomValue","styles","root","resize","width","field","minHeight","appTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","initializeIcons","App","_DismissMenu","_AppItems","showInDock","showInMenu","isMenuOpen","setIsMenuOpen","_onMouseDown","_onMouseUp","_onMenuClicked","_onAppItemClicked","addEventListener","removeEventListener","ThemeProvider","theme","verticalFill","hasPath","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","process","getElementById"],"mappings":"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","file":"static/js/main.319847d5.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { IMenuItem } from '../Menu/Menu';\r\n\r\nexport interface IAppRouteItem extends IMenuItem {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport interface IAppRouteProps {\r\n    item: IAppRouteItem;\r\n}\r\n\r\nconst Title: React.FunctionComponent<IAppRouteProps> = ({ item }) => {\r\n    \r\n    useEffect(() => {\r\n        document.title = `Troy's Desktop - ${item.title}`;\r\n        localStorage.setItem(\"TroysDesktopLastPage\", window.location.pathname);\r\n    }, [item]);\r\n\r\n    return React.createElement(item.component);\r\n}\r\n\r\nexport default Title;","import { DefaultButton, Stack, StackItem, Text } from '@fluentui/react';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Menu.css';\r\n\r\ninterface IMenuProps {\r\n    menuItems: IMenuItem[];\r\n    isOpen: boolean;\r\n    onMenuItemClicked: () => void;\r\n}\r\n\r\nexport interface IMenuItem {\r\n    iconName: string;\r\n    title: string;\r\n    path: string;\r\n    showInDock: boolean;\r\n    showInMenu: boolean;\r\n}\r\n\r\nconst Menu: React.FunctionComponent<IMenuProps> = ({ menuItems, isOpen, onMenuItemClicked }) => {\r\n    return <Stack className=\"Menu\" style={{ display: !isOpen ? \"none\" : \"unset\" }}>\r\n        {menuItems.length > 0 ? menuItems.map(i => (\r\n            <StackItem className=\"MenuItem\" key={i.path} grow>\r\n                <Link to={i.path} onClick={() => onMenuItemClicked()}>\r\n                    <DefaultButton iconProps={{ iconName: i.iconName }} title={i.title}>{i.title}</DefaultButton>\r\n                </Link>\r\n            </StackItem>\r\n        )) : (\r\n            <StackItem className=\"MenuItem\" key=\"noItems\" grow>\r\n                <Text variant=\"medium\">No menu items to show</Text>\r\n            </StackItem>\r\n        )}\r\n    </Stack>;\r\n}\r\n\r\nexport default Menu;","type TimeChangedHandler = (newTime: Date) => void;\r\n\r\ninterface ITimeServiceEventHandlers {\r\n    Second: TimeChangedHandler[];\r\n    Minute: TimeChangedHandler[];\r\n    Hour: TimeChangedHandler[];\r\n}\r\n\r\nclass TimeService {\r\n    private _handlers: ITimeServiceEventHandlers = {\r\n        Second: [],\r\n        Minute: [],\r\n        Hour: []\r\n    };\r\n\r\n    constructor() {\r\n        const initialWait = 1000 - new Date().getMilliseconds();\r\n        setTimeout(() => {\r\n            setInterval(() => {\r\n                const now = new Date();\r\n                this.notify('Second', now);\r\n                if (now.getSeconds() === 0) {\r\n                    this.notify('Minute', now);\r\n                    if (now.getMinutes() === 0) {\r\n                        this.notify('Hour', now);\r\n                    }\r\n                }\r\n            }, 1000);\r\n        }, initialWait);\r\n    }\r\n\r\n    public subscribe = (event: keyof ITimeServiceEventHandlers, delegate: TimeChangedHandler) => {\r\n        if (delegate) {\r\n            const existingIndex = this._handlers[event].indexOf(delegate);\r\n            if (existingIndex >= 0) {\r\n                return existingIndex + 1;\r\n            }\r\n            else {\r\n                this._handlers[event].push(delegate);\r\n                return this._handlers[event].length;\r\n            }\r\n        }\r\n    }\r\n\r\n    public unsubscribe = (event: keyof ITimeServiceEventHandlers, id: number) => {\r\n        if (id >= 0 && id < this._handlers[event].length) {\r\n            this._handlers[event].splice(id, 1);\r\n        }\r\n    }\r\n\r\n    private notify = (event: keyof ITimeServiceEventHandlers, newTime: Date) => {\r\n        this._handlers[event].forEach(delegate => {\r\n            delegate(newTime);\r\n        })\r\n    }\r\n}\r\n\r\nconst timeService = new TimeService();\r\nexport default timeService;","import { Label } from '@fluentui/react';\r\nimport * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './Clock.css';\r\nimport timeService from '../../services/TimeService';\r\n\r\ninterface IClockState {\r\n    hasClockData: boolean;\r\n    hours: string;\r\n    minutes: string;\r\n    seconds: string;\r\n    part: \"AM\" | \"PM\";\r\n}\r\n\r\nconst Clock: React.FunctionComponent<any> = () => {\r\n    const [time, setTime] = useState<IClockState>({\r\n        hasClockData: false,\r\n        hours: \"0\",\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n        part: \"AM\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        let subscriptionId = timeService.subscribe('Second', updateTime);\r\n        return () => {\r\n            if (subscriptionId) {\r\n                timeService.unsubscribe('Second', subscriptionId);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    let updateTime = (now: Date) => {\r\n        const hours = now.getHours();\r\n        const minutes = now.getMinutes();\r\n        const seconds = now.getSeconds();\r\n        setTime({\r\n            hasClockData: true,\r\n            hours: (hours === 0 ? 12 : hours > 12 ? hours - 12 : hours).toString(),\r\n            minutes: minutes.toString().padStart(2, \"0\"),\r\n            seconds: seconds.toString().padStart(2, \"0\"),\r\n            part: hours < 12 ? \"AM\" : \"PM\"\r\n        })\r\n    }\r\n\r\n    return <Label className=\"Clock\">{time.hasClockData && `${time.hours}:${time.minutes}:${time.seconds} ${time.part}`}</Label>;\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\nimport './Dock.css';\r\nimport { DefaultButton, Stack, StackItem } from '@fluentui/react';\r\nimport { IMenuItem } from '../Menu/Menu';\r\nimport Clock from '../Clock/Clock';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IDockProps {\r\n    dockItems: IMenuItem[];\r\n    onMenuClicked: () => void;\r\n    onMenuItemClicked: () => void;\r\n}\r\n\r\nconst Dock: React.FunctionComponent<IDockProps> = ({ dockItems, onMenuClicked, onMenuItemClicked }) => {\r\n    return <Stack className=\"Dock\" horizontal horizontalAlign=\"stretch\" tokens={{ childrenGap: 2 }}>\r\n        <StackItem grow >\r\n            <Stack horizontal horizontalAlign=\"space-around\" >\r\n                <Stack horizontal tokens={{ childrenGap: 4 }}>\r\n                    <StackItem>\r\n                        <DefaultButton iconProps={{ iconName: \"WindowsLogo\" }} onClick={onMenuClicked} title=\"Menu\" />\r\n                    </StackItem>\r\n                    {dockItems.length > 0 && dockItems.map(i => (<StackItem key={i.path}>\r\n                        <Link to={i.path} onClick={() => onMenuItemClicked()}>\r\n                            <DefaultButton\r\n                                className={(window.location.pathname === i.path) ? \"active\" : \"\"}\r\n                                title={i.title}\r\n                                iconProps={{ iconName: i.iconName }} />\r\n                        </Link>\r\n                    </StackItem>))}\r\n                </Stack>\r\n            </Stack>\r\n        </StackItem>\r\n        <StackItem shrink>\r\n            <Clock />\r\n        </StackItem>\r\n    </Stack>;\r\n}\r\n\r\nexport default Dock;","import React from 'react';\r\n\r\nexport interface IHomeProps {}\r\n\r\nconst Home: React.FunctionComponent<IHomeProps> = () => {\r\n    return <></>;\r\n}\r\n\r\nexport default Home;","import { DefaultButton, Stack, Text } from '@fluentui/react';\r\nimport React from 'react';\r\n\r\nconst Feedback: React.FunctionComponent = () => {\r\n\r\n    return <>\r\n        <Stack tokens={{ childrenGap: 30 }}>\r\n            <Stack tokens={{ childrenGap: 10 }}>\r\n                <Text variant=\"xLarge\">Bugs</Text>\r\n                <Text variant=\"medium\">If you have any issues using a tool on this site, please create an issue in the repo and tag it as a bug.</Text>\r\n            </Stack>\r\n            <Stack tokens={{ childrenGap: 10 }}>\r\n                <Text variant=\"xLarge\">Ideas</Text>\r\n                <Text variant=\"medium\">If you find this site useful and want to share an idea for a tool that would make it more useful, please create an issue in the repo and tag it as a request.</Text>\r\n            </Stack>\r\n            <Stack tokens={{ childrenGap: 10 }} horizontalAlign=\"start\">\r\n                <Text variant=\"medium\">You will need to have a GitHub account to create the feedback item. (Don't worry it's completely free)</Text>\r\n                <Stack horizontal tokens={{ childrenGap: 10 }}>\r\n                    <DefaultButton href=\"https://github.com/tpalacino/tpalacino.github.io\" target=\"_blank\" data-intercaption=\"off\">GitHub Repo</DefaultButton>\r\n                    <DefaultButton href=\"https://github.com/tpalacino/tpalacino.github.io/issues/new\" target=\"_blank\" data-intercaption=\"off\">New Issue</DefaultButton>\r\n                </Stack>\r\n            </Stack>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default Feedback;","import React, { useState } from \"react\";\r\nimport { Dropdown, IDropdownOption, PrimaryButton, Stack, TextField } from \"@fluentui/react\";\r\n\r\ntype UrlEncoderMode = 'decodeComponent' | 'decode' | 'encodeComponent' | 'encode';\r\n\r\ninterface IUrlEncoderState {\r\n    mode: UrlEncoderMode;\r\n    encodeValue: string;\r\n    decodeValue: string;\r\n    results: string;\r\n    canProcess: boolean;\r\n}\r\n\r\nconst UrlEncoder: React.FunctionComponent = () => {\r\n\r\n    const [state, setState] = useState<IUrlEncoderState>({\r\n        mode: 'decodeComponent',\r\n        encodeValue: '',\r\n        decodeValue: '',\r\n        results: '',\r\n        canProcess: false\r\n    });\r\n\r\n    let _canProcess = (mode: UrlEncoderMode, encodeValue?: string, decodeValue?: string): boolean => {\r\n        let retVal = false;\r\n        switch (mode) {\r\n            case \"decodeComponent\":\r\n            case \"decode\": {\r\n                retVal = decodeValue ? decodeValue.trim().length > 0 : false;\r\n                break;\r\n            }\r\n            case \"encodeComponent\":\r\n            case \"encode\": {\r\n                retVal = encodeValue ? encodeValue.trim().length > 0 : false;\r\n                break;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    let _onEncodedChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            encodeValue: newValue,\r\n            canProcess: _canProcess(state.mode, newValue, state.decodeValue),\r\n            results: ''\r\n        });\r\n    }\r\n\r\n    let _onDecodedChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            decodeValue: newValue,\r\n            canProcess: _canProcess(state.mode, state.encodeValue, newValue),\r\n            results: ''\r\n        });\r\n    }\r\n\r\n    let _onModeChanged = (e?: any, item?: IDropdownOption) => {\r\n        let newMode = state.mode;\r\n        if (item && item.key) {\r\n            newMode = item.key as UrlEncoderMode;\r\n        }\r\n        setState({\r\n            ...state,\r\n            mode: newMode,\r\n            canProcess: _canProcess(newMode, state.encodeValue, state.decodeValue),\r\n            results: ''\r\n        });\r\n    }\r\n\r\n    let _Process = () => {\r\n        if (state.canProcess) {\r\n            let results: string = '';\r\n            try {\r\n                switch (state.mode) {\r\n                    case \"decodeComponent\": {\r\n                        results = decodeURIComponent(state.decodeValue);\r\n                        break;\r\n                    }\r\n                    case \"decode\": {\r\n                        results = decodeURI(state.decodeValue);\r\n                        break;\r\n                    }\r\n                    case \"encodeComponent\": {\r\n                        results = encodeURIComponent(state.encodeValue);\r\n                        break;\r\n                    }\r\n                    case \"encode\": {\r\n                        results = encodeURI(state.encodeValue);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (err) {\r\n                const error = err as any;\r\n                if (error && error.message) {\r\n                    results = error.message;\r\n                }\r\n                else {\r\n                    results = `${error}`;\r\n                }\r\n            }\r\n            setState({\r\n                ...state,\r\n                results: results ? results : ''\r\n            });\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Stack className=\"UrlEncoder\" tokens={{ childrenGap: 20 }}>\r\n            {(state.mode === 'decodeComponent' || state.mode === 'decode') && <>\r\n                <TextField label=\"Decode\" multiline value={state.decodeValue} rows={10} onChange={_onDecodedChanged} />\r\n            </>}\r\n            {(state.mode === 'encodeComponent' || state.mode === 'encode') && <>\r\n                <TextField label=\"Encode\" multiline value={state.encodeValue} rows={10} onChange={_onEncodedChanged} />\r\n            </>}\r\n            <TextField label=\"Results\" multiline value={state.results} rows={10} readOnly />\r\n            <Stack horizontal grow tokens={{ childrenGap: 10 }}>\r\n                <Dropdown\r\n                    dropdownWidth='auto'\r\n                    selectedKey={state.mode}\r\n                    onChange={_onModeChanged}\r\n                    options={[\r\n                        {\r\n                            key: \"decodeComponent\",\r\n                            text: \"Decode URI Component\"\r\n                        },\r\n                        {\r\n                            key: \"decode\",\r\n                            text: \"Decode URI\"\r\n                        },\r\n                        {\r\n                            key: \"encodeComponent\",\r\n                            text: \"Encode URI Component\"\r\n                        },\r\n                        {\r\n                            key: \"encode\",\r\n                            text: \"Encode URI\"\r\n                        }\r\n                    ]} />\r\n                <PrimaryButton text=\"Process\" disabled={!state.canProcess} onClick={_Process} />\r\n            </Stack>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default UrlEncoder;","import { Dropdown, IDropdownOption, PrimaryButton, Stack, TextField } from \"@fluentui/react\";\r\nimport React, { useState } from \"react\";\r\n\r\ntype RegexMode = 'exec' | 'test' | 'replace';\r\n\r\ninterface IRegex {\r\n    mode: RegexMode;\r\n    pattern: string;\r\n    input: string;\r\n    replacement: string;\r\n    results: string;\r\n    canProcess: boolean;\r\n}\r\n\r\nconst Regex: React.FunctionComponent = () => {\r\n\r\n    const [state, setState] = useState<IRegex>({\r\n        mode: 'exec',\r\n        pattern: '',\r\n        input: '',\r\n        replacement: '',\r\n        results: '',\r\n        canProcess: false\r\n    });\r\n\r\n    let _canProcess = (mode: RegexMode, pattern?: string, replacement?: string): boolean => {\r\n        let retVal = false;\r\n        switch (mode) {\r\n            case \"test\":\r\n            case \"exec\": {\r\n                retVal = pattern ? pattern.trim().length > 0 : false;\r\n                break;\r\n            }\r\n            case \"replace\": {\r\n                retVal = (pattern ? pattern.trim().length > 0 : false) && (replacement ? replacement.trim().length > 0 : false);\r\n                break;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    let _onPatternChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            pattern: newValue,\r\n            canProcess: _canProcess(state.mode, newValue, state.replacement)\r\n        });\r\n    }\r\n\r\n    let _onInputChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            input: newValue\r\n        });\r\n    }\r\n\r\n    let _onReplacementChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            replacement: newValue,\r\n            canProcess: _canProcess(state.mode, state.pattern, newValue)\r\n        });\r\n    }\r\n\r\n    let _onModeChanged = (e?: any, item?: IDropdownOption) => {\r\n        let newMode = state.mode;\r\n        if (item && item.key) {\r\n            newMode = item.key as RegexMode;\r\n        }\r\n        setState({\r\n            ...state,\r\n            mode: newMode,\r\n            canProcess: _canProcess(newMode, state.pattern, state.replacement)\r\n        });\r\n    }\r\n\r\n    let _Process = () => {\r\n        if (state.canProcess) {\r\n            let results: string = '';\r\n            try {\r\n                const pattern = new RegExp(state.pattern);\r\n                switch (state.mode) {\r\n                    case \"exec\": {\r\n                        const m = pattern.exec(state.input);\r\n                        if (m) {\r\n                            results = JSON.stringify(m, null, 4);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"test\": {\r\n                        results = `${pattern.test(state.input)}`;\r\n                        break;\r\n                    }\r\n                    case \"replace\": {\r\n                        results = state.input.replace(pattern, state.replacement);\r\n                    }\r\n                }\r\n                \r\n            }\r\n            catch (err) {\r\n                const error = err as any;\r\n                if (error && error.message) {\r\n                    results = error.message;\r\n                }\r\n                else {\r\n                    results = `${error}`;\r\n                }\r\n            }\r\n            setState(old => {\r\n                return {\r\n                    ...old,\r\n                    results: results ? results : ''\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Stack className=\"Regex\" tokens={{ childrenGap: 20 }}>\r\n            <TextField label=\"Pattern\" multiline value={state.pattern} rows={5} onChange={_onPatternChanged} />\r\n            <TextField label=\"Input\" multiline value={state.input} rows={5} onChange={_onInputChanged} />\r\n            {state.mode === 'replace' && <>\r\n                <TextField label=\"Replacement\" multiline value={state.replacement} rows={5} onChange={_onReplacementChanged} />\r\n            </>}\r\n            <TextField label=\"Results\" multiline value={state.results} rows={10} readOnly />\r\n            <Stack horizontal grow tokens={{ childrenGap: 10 }}>\r\n                <Dropdown\r\n                    selectedKey={state.mode}\r\n                    onChange={_onModeChanged}\r\n                    options={[\r\n                        {\r\n                            key: \"exec\",\r\n                            text: \"Match\"\r\n                        },\r\n                        {\r\n                            key: \"test\",\r\n                            text: \"Is Match\"\r\n                        },\r\n                        {\r\n                            key: \"replace\",\r\n                            text: \"Replace\"\r\n                        }\r\n                    ]} />\r\n                <PrimaryButton text=\"Process\" disabled={!state.canProcess} onClick={_Process} />\r\n            </Stack>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default Regex;","import React from 'react';\r\n\r\nconst NotFound: React.FunctionComponent = () => {\r\n    return <>Page Not Found</>;\r\n}\r\n\r\nexport default NotFound;","import { ComboBox, IComboBoxOption, IDropdownOption, Label, Stack, Toggle } from '@fluentui/react';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport timeService from '../../services/TimeService';\r\n\r\ntype AmPmDesignator = \"AM\" | \"PM\";\r\n\r\ninterface ITimeConverterState {\r\n    useCurrentTimeAsSource: boolean;\r\n    targetTimeZone?: string;\r\n}\r\n\r\nconst DefaultTimeZone: string = \"Local Time Zone\";\r\n\r\ninterface ITimeConverterTime {\r\n    year: number;\r\n    month: number;\r\n    day: number;\r\n    hour: number;\r\n    minute: number;\r\n    second: number;\r\n    designator: AmPmDesignator;\r\n    timeZone: string;\r\n}\r\n\r\nconst getTime = (date: Date): ITimeConverterTime => {\r\n    let designator: AmPmDesignator = \"AM\";\r\n    let hours = date.getHours();\r\n    if (hours >= 12) {\r\n        hours = hours - 12;\r\n        designator = \"PM\";\r\n    }\r\n    if (hours === 0) {\r\n        hours = 12;\r\n    }\r\n    return {\r\n        year: date.getFullYear(),\r\n        month: date.getMonth(),\r\n        day: date.getDate(),\r\n        hour: hours,\r\n        minute: date.getMinutes(),\r\n        second: date.getSeconds(),\r\n        designator: designator,\r\n        timeZone: DefaultTimeZone\r\n    };\r\n}\r\n\r\nconst TimeConverter: React.FunctionComponent = () => {\r\n\r\n    const TimeZones: string[] = require('../../data/TimeZones.json');\r\n\r\n    const [convertedTime, setConvertedTime] = useState<ITimeConverterTime>();\r\n\r\n    const [currentTime, setCurrentTime] = useState<ITimeConverterTime>(() => getTime(new Date()));\r\n\r\n    const [userTime, setUserTime] = useState<ITimeConverterTime>(() => getTime(new Date()));\r\n\r\n    const [state, setState] = useState<ITimeConverterState>({ useCurrentTimeAsSource: true });\r\n\r\n    //#region Event Handlers\r\n    const onUseCurrentTimeChanged = (ev?: any, checked?: boolean) => {\r\n        const newUseCurrentTimeAsSource = true === checked;\r\n        setState({\r\n            ...state,\r\n            useCurrentTimeAsSource: newUseCurrentTimeAsSource\r\n        });\r\n        updateConvertedTime(newUseCurrentTimeAsSource ? currentTime : userTime, state.targetTimeZone);\r\n    }\r\n\r\n    const onHoursChanged = (ev?: any, option?: IComboBoxOption) => {\r\n        if (typeof option?.key === \"number\" && !Number.isNaN(option.key)) {\r\n            const newUserTime = {\r\n                ...userTime,\r\n                hour: option.key\r\n            };\r\n            setUserTime(newUserTime);\r\n            updateConvertedTime(newUserTime, state.targetTimeZone);\r\n        }\r\n    }\r\n\r\n    const onMinutesChanged = (ev?: any, option?: IComboBoxOption) => {\r\n        if (typeof option?.key === \"number\" && !Number.isNaN(option.key)) {\r\n            const newUserTime = {\r\n                ...userTime,\r\n                minute: option.key\r\n            };\r\n            setUserTime(newUserTime);\r\n            updateConvertedTime(newUserTime, state.targetTimeZone);\r\n        }\r\n    }\r\n\r\n    const onDesignatorChanged = (ev?: any, option?: IComboBoxOption) => {\r\n        if (typeof option?.key === \"string\") {\r\n            let designator = userTime.designator;\r\n            switch (option.key) {\r\n                case \"AM\":\r\n                case \"PM\": {\r\n                    designator = option.key;\r\n                }\r\n            }\r\n            if (designator !== userTime.designator) {\r\n                const newUserTime = {\r\n                    ...userTime,\r\n                    designator: designator\r\n                };\r\n                setUserTime(newUserTime);\r\n                updateConvertedTime(newUserTime, state.targetTimeZone);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSourceTimeZoneChanged = (ev?: any, option?: IComboBoxOption) => {\r\n        if (typeof option?.key === \"string\") {\r\n            const newUserTime = {\r\n                ...userTime,\r\n                timeZone: option.key\r\n            };\r\n            setUserTime(newUserTime);\r\n            updateConvertedTime(newUserTime, state.targetTimeZone);\r\n        }\r\n    }\r\n\r\n    const onTargetTimeZoneChanged = (ev?: any, option?: IComboBoxOption) => {\r\n        if (typeof option?.key === \"string\") {\r\n            const newState = {\r\n                ...state,\r\n                targetTimeZone: option.key\r\n            };\r\n            setState(newState);\r\n            updateConvertedTime(state.useCurrentTimeAsSource ? currentTime : userTime, newState.targetTimeZone);\r\n        }\r\n    }\r\n    //#endregion Event Handlers\r\n\r\n    //#region Methods\r\n    const getHours = (): IComboBoxOption[] => {\r\n        let retVal: IComboBoxOption[] = [];\r\n        for (var i = 1; i <= 12; i++) {\r\n            retVal.push({\r\n                key: i,\r\n                text: i.toString()\r\n            });\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    const getMinutes = (): IComboBoxOption[] => {\r\n        let retVal: IComboBoxOption[] = [];\r\n        for (var i = 0; i <= 59; i++) {\r\n            retVal.push({\r\n                key: i,\r\n                text: i.toString().padStart(2, '0'),\r\n                hidden: i % 5 !== 0\r\n            });\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    const getDesignators = (): IComboBoxOption[] => {\r\n        return [\"AM\", \"PM\"].map(d => ({ key: d, text: d }));\r\n    }\r\n\r\n    const getTimeZoneOptions = (): IDropdownOption[] => {\r\n        let retVal: IDropdownOption[] = [{\r\n            key: DefaultTimeZone,\r\n            text: DefaultTimeZone\r\n        }];\r\n        TimeZones.forEach(tz => {\r\n            retVal.push({\r\n                key: tz,\r\n                text: tz\r\n            });\r\n        });\r\n        return retVal;\r\n    }\r\n\r\n    const updateConvertedTime = useCallback((sourceTime: ITimeConverterTime, targetTimeZone?: string): void => {\r\n        try {\r\n            if (sourceTime && targetTimeZone) {\r\n                let hours = sourceTime.hour;\r\n                if (sourceTime.designator === \"PM\") {\r\n                    hours = hours + 12;\r\n                }\r\n                if (hours === 24) {\r\n                    hours = 0;\r\n                }\r\n                const conversionOptions = DefaultTimeZone === targetTimeZone ? undefined : { timeZone: targetTimeZone };\r\n                const timeString = new Date(\r\n                    sourceTime.year,\r\n                    sourceTime.month,\r\n                    sourceTime.day,\r\n                    hours,\r\n                    sourceTime.minute,\r\n                    sourceTime.second\r\n                ).toLocaleString(\"en-us\", conversionOptions);\r\n                const timeMatch = /^(?<month>\\d{1,2})\\/(?<day>\\d{1,2})\\/(?<year>\\d{4}),\\s(?<hours>\\d{1,2}):(?<minutes>\\d{1,2}):(?<seconds>\\d{1,2})\\s(?<designator>[AP]M)$/.exec(timeString);\r\n                if (timeMatch && timeMatch.groups) {\r\n                    let parsedHours = parseInt(timeMatch.groups.hours);\r\n                    if (timeMatch.groups.designator === \"PM\") {\r\n                        parsedHours = parsedHours + 12;\r\n                    }\r\n                    if (parsedHours === 24) {\r\n                        parsedHours = 0;\r\n                    }\r\n                    setConvertedTime(getTime(new Date(\r\n                        parseInt(timeMatch.groups.year),\r\n                        parseInt(timeMatch.groups.month),\r\n                        parseInt(timeMatch.groups.day),\r\n                        parsedHours,\r\n                        parseInt(timeMatch.groups.minutes),\r\n                        parseInt(timeMatch.groups.seconds)\r\n                    )))\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.log(\"An error occurred updating the converted time.\", err);\r\n        }\r\n    }, [setConvertedTime])\r\n    //#endregion Methods\r\n\r\n    useEffect(() => {\r\n        let id = timeService.subscribe(\"Minute\", time => {\r\n            if (id) {\r\n                const newCurrentTime = getTime(time);\r\n                setCurrentTime(newCurrentTime);\r\n                if (state.useCurrentTimeAsSource) {\r\n                    updateConvertedTime(newCurrentTime, state.targetTimeZone);\r\n                }\r\n            }\r\n        });\r\n        return () => {\r\n            if (id) {\r\n                timeService.unsubscribe(\"Minute\", id);\r\n                id = undefined;\r\n            }\r\n        };\r\n    }, [state, updateConvertedTime]);\r\n\r\n    return <>\r\n        <Stack className=\"TimeConverter\" horizontalAlign=\"start\" tokens={{ childrenGap: 20 }}>\r\n            <Toggle label=\"Use Current Time\" checked={state.useCurrentTimeAsSource} onChange={onUseCurrentTimeChanged} />\r\n            <Stack>\r\n                <Label>Source Time</Label>\r\n                <Stack horizontal verticalAlign=\"end\" tokens={{ childrenGap: 4 }}>\r\n                    <ComboBox\r\n                        options={getHours()}\r\n                        disabled={state.useCurrentTimeAsSource}\r\n                        allowFreeform={false}\r\n                        useComboBoxAsMenuWidth\r\n                        selectedKey={state.useCurrentTimeAsSource ? currentTime.hour : userTime.hour}\r\n                        onChange={onHoursChanged} />\r\n                    <ComboBox\r\n                        options={getMinutes()}\r\n                        disabled={state.useCurrentTimeAsSource}\r\n                        useComboBoxAsMenuWidth\r\n                        selectedKey={state.useCurrentTimeAsSource ? currentTime.minute : userTime.minute}\r\n                        onChange={onMinutesChanged} />\r\n                    <ComboBox\r\n                        options={getDesignators()}\r\n                        disabled={state.useCurrentTimeAsSource}\r\n                        allowFreeform={false}\r\n                        useComboBoxAsMenuWidth\r\n                        selectedKey={state.useCurrentTimeAsSource ? currentTime.designator : userTime.designator}\r\n                        onChange={onDesignatorChanged} />\r\n                </Stack>\r\n            </Stack>\r\n            <ComboBox\r\n                label=\"Source Time Zone\"\r\n                options={getTimeZoneOptions()}\r\n                allowFreeform={false}\r\n                autoComplete=\"off\"\r\n                disabled={state.useCurrentTimeAsSource}\r\n                selectedKey={state.useCurrentTimeAsSource ? currentTime.timeZone : userTime.timeZone}\r\n                onChange={onSourceTimeZoneChanged} />\r\n            <ComboBox\r\n                label=\"Target Time Zone\"\r\n                options={getTimeZoneOptions()}\r\n                allowFreeform={false}\r\n                autoComplete=\"off\"\r\n                selectedKey={state.targetTimeZone}\r\n                onChange={onTargetTimeZoneChanged} />\r\n            <Stack>\r\n                <Label>Converted Time</Label>\r\n                <Stack horizontal verticalAlign=\"end\" tokens={{ childrenGap: 4 }}>\r\n                    <ComboBox\r\n                        options={[]}\r\n                        disabled={true}\r\n                        useComboBoxAsMenuWidth\r\n                        text={convertedTime?.hour?.toString().padStart(2, '0')}\r\n                    />\r\n                    <ComboBox\r\n                        options={[]}\r\n                        disabled={true}\r\n                        useComboBoxAsMenuWidth\r\n                        text={convertedTime?.minute?.toString().padStart(2, '0')}\r\n                    />\r\n                    <ComboBox\r\n                        options={[]}\r\n                        disabled={true}\r\n                        useComboBoxAsMenuWidth\r\n                        text={convertedTime?.designator}\r\n                    />\r\n                </Stack>\r\n            </Stack>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default TimeConverter;","import { ITag, Label, Position, PrimaryButton, SpinButton, Stack, TagPicker, TextField, Toggle } from '@fluentui/react';\r\nimport React, { useState } from 'react';\r\n\r\nconst AlphaLowerChars: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\r\n\r\nconst AlphaUpperChars: string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n\r\nconst NumericChars: string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\n\r\nconst SpecialChars: string[] = ['`', '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '[', ']', '{', '}', '\\\\', '|', ';', ':', '\\'', '\"', ',', '<', '.', '>', '/', '?'];\r\n\r\nconst DefaultSpecialChars: string[] = ['.', '-'];\r\n\r\nconst MaxLength: number = 500000;\r\n\r\nconst DefaultNumberOfCharacters = 20;\r\n\r\nconst DefaultNumberOfMilliseconds = 10000;\r\n\r\nconst getOccurrences = (value: string, char: string) => {\r\n    let retVal = 0;\r\n    if (typeof value === 'string' && typeof char === 'string') {\r\n        for (var i = 0; i < value.length; i++) {\r\n            if (value[i] === char) {\r\n                retVal++;\r\n            }\r\n        }\r\n    }\r\n    return retVal;\r\n};\r\n\r\nconst Generators: React.FunctionComponent = () => {\r\n\r\n    const [includeAlphaLower, setIncludeAlphaLower] = useState(true);\r\n\r\n    const [includeAlphaUpper, setIncludeAlphaUpper] = useState(true);\r\n\r\n    const [includeNumeric, setIncludeNumeric] = useState(true);\r\n\r\n    const [includeSpecial, setIncludeSpecial] = useState(true);\r\n\r\n    const [allowedSpecialChars, setAllowedSpecialChars] = useState<string[]>(DefaultSpecialChars);\r\n\r\n    const [numberOfCharacters, setNumberOfCharacters] = useState(DefaultNumberOfCharacters);\r\n\r\n    const [numberOfMilliseconds, setNumberOfMilliseconds] = useState(DefaultNumberOfMilliseconds);\r\n\r\n    const [generatedValue, setGeneratedValue] = useState('');\r\n\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n\r\n    //#region Event Handlers\r\n\r\n    const onIncludeAlphaLowerChanged = (ev?: any, checked?: boolean) => {\r\n        setIncludeAlphaLower(true === checked);\r\n    }\r\n\r\n    const onIncludeAlphaUpperChanged = (ev?: any, checked?: boolean) => {\r\n        setIncludeAlphaUpper(true === checked);\r\n    }\r\n\r\n    const onIncludeNumericChanged = (ev?: any, checked?: boolean) => {\r\n        setIncludeNumeric(true === checked);\r\n    }\r\n\r\n    const onIncludeSpecialChanged = (ev?: any, checked?: boolean) => {\r\n        setIncludeSpecial(true === checked);\r\n    }\r\n\r\n    const onNumberOfCharactersChanged = (ev?: any, value?: string) => {\r\n        const newValue = Number(value);\r\n        setNumberOfCharacters(Number.isNaN(newValue) ? DefaultNumberOfCharacters : newValue);\r\n    }\r\n\r\n    const onNumberOfMillisecondsChanged = (ev?: any, value?: string) => {\r\n        const newValue = Number(value?.replace(/[^\\d]/g, ''));\r\n        setNumberOfMilliseconds(Number.isNaN(newValue) ? DefaultNumberOfMilliseconds : newValue);\r\n    }\r\n\r\n    const onGenerateClicked = () => {\r\n        setIsGenerating(true);\r\n        setTimeout(() => {\r\n            const randomValue = generate();\r\n            setGeneratedValue(randomValue);\r\n            setIsGenerating(false);\r\n        }, 1);\r\n    }\r\n\r\n    //#endregion Event Handlers\r\n\r\n    const getAllowedChars = (): string[] => {\r\n        let retVal: string[] = [];\r\n        if (includeSpecial && allowedSpecialChars) {\r\n            retVal = retVal.concat(allowedSpecialChars);\r\n        }\r\n        if (includeAlphaLower || includeAlphaUpper) {\r\n            if (includeAlphaLower === includeAlphaUpper) {\r\n                let alphaChars: string[] = [];\r\n                for (var i = 0; i < AlphaLowerChars.length; i++) {\r\n                    const lowerChar = AlphaLowerChars[i];\r\n                    if (lowerChar) {\r\n                        alphaChars.push(lowerChar);\r\n                    }\r\n                    const upperChar = AlphaUpperChars[i];\r\n                    if (upperChar) {\r\n                        alphaChars.push(upperChar);\r\n                    }\r\n                }\r\n                retVal = retVal.concat(alphaChars);\r\n            }\r\n            else if (includeAlphaLower) {\r\n                retVal = retVal.concat(AlphaLowerChars);\r\n            }\r\n            else if (includeAlphaUpper) {\r\n                retVal = retVal.concat(AlphaUpperChars);\r\n            }\r\n        }\r\n        if (includeNumeric) {\r\n            retVal = retVal.concat(NumericChars);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    const generate = (): string => {\r\n        let length = numberOfCharacters;\r\n        const timeout = numberOfMilliseconds;\r\n        const allowedChars = getAllowedChars();\r\n        if (length > MaxLength) {\r\n            length = MaxLength;\r\n            console.warn(`Generating random strings longer than ${MaxLength.toLocaleString()} characters is not supported.`);\r\n\r\n        }\r\n        let retVal = '';\r\n        const endTime = new Date();\r\n        endTime.setMilliseconds(endTime.getMilliseconds() + timeout || 1000);\r\n        let forceBreak = false;\r\n        while (retVal.length < length && !forceBreak) {\r\n            const charIndex = Math.floor(Math.random() * allowedChars.length);\r\n            const char = allowedChars[charIndex];\r\n            const occurrences = getOccurrences(retVal, char);\r\n            if ((occurrences === 0 || (occurrences > 0 && occurrences <= Math.round(length / allowedChars.length))) && retVal[retVal.length - 1] !== char) {\r\n                retVal += char;\r\n            }\r\n            const newTime = new Date();\r\n            if (newTime.getTime() >= endTime.getTime()) {\r\n                forceBreak = true;\r\n                console.warn(`Ran out of time generating random string. Successfully generated ${retVal.length.toLocaleString()} characters.`);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    const onResolveSpecialChars = (filterText: string) => new Promise<ITag[]>((resolve) => {\r\n        resolve(SpecialChars.filter(c => filterText.includes(c) && !allowedSpecialChars.includes(c)).map(c => ({ name: c, key: c })));\r\n    })\r\n\r\n    const onAllowedSpecialCharsChanged = (items?: ITag[]) => {\r\n        setAllowedSpecialChars((items || []).map(x => `${x.key}`));\r\n    }\r\n\r\n    return <Stack className=\"Generators\" horizontalAlign=\"start\" tokens={{ childrenGap: 20 }}>\r\n        <Toggle label=\"Lower Case\" onText='Included' offText='Not Included' checked={includeAlphaLower} onChange={onIncludeAlphaLowerChanged} />\r\n        <Toggle label=\"Upper Case\" onText='Included' offText='Not Included' checked={includeAlphaUpper} onChange={onIncludeAlphaUpperChanged} />\r\n        <Toggle label=\"Numeric\" onText='Included' offText='Not Included' checked={includeNumeric} onChange={onIncludeNumericChanged} />\r\n        <Toggle label=\"Special\" onText='Included' offText='Not Included' checked={includeSpecial} onChange={onIncludeSpecialChanged} />\r\n        {includeSpecial && <>\r\n            <Label>\r\n                <span style={{ marginBottom: 5 }}>Allowed Special Characters</span>\r\n                <TagPicker selectedItems={allowedSpecialChars.map(c => ({ name: c, key: c }))} onResolveSuggestions={onResolveSpecialChars} onChange={onAllowedSpecialCharsChanged} />\r\n            </Label>\r\n        </>}\r\n        <SpinButton\r\n            label=\"Number of Characters\"\r\n            labelPosition={Position.top}\r\n            min={0}\r\n            value={numberOfCharacters.toLocaleString()}\r\n            onChange={onNumberOfCharactersChanged} />\r\n        <SpinButton\r\n            label=\"Time to Wait\"\r\n            labelPosition={Position.top}\r\n            min={500}\r\n            step={100}\r\n            value={numberOfMilliseconds.toLocaleString()}\r\n            onChange={onNumberOfMillisecondsChanged} />\r\n        <PrimaryButton disabled={isGenerating} onClick={onGenerateClicked}>Generate</PrimaryButton>\r\n        <TextField\r\n            label=\"Generated Value\"\r\n            readOnly\r\n            multiline\r\n            styles={{ root: { resize: \"vertical\", width: \"100%\" }, field: { minHeight: 250 } }}\r\n            value={generatedValue} />\r\n    </Stack>;\r\n}\r\n\r\nexport default Generators;","import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { Stack, StackItem, ThemeProvider } from \"@fluentui/react\";\r\nimport \"./App.css\";\r\nimport { initializeIcons } from '@fluentui/react';\r\nimport { createTheme } from \"@fluentui/style-utilities\";\r\nimport Title, { IAppRouteItem } from './components/Title/Title';\r\nimport Menu from './components/Menu/Menu';\r\nimport Dock from './components/Dock/Dock';\r\nimport Home from \"./pages/Home/Home\";\r\nimport Feedback from \"./pages/Feedback/Feedback\";\r\nimport UrlEncoder from \"./pages/UrlEncoder/UrlEncoder\";\r\nimport Regex from \"./pages/Regex/Regex\";\r\nimport NotFound from \"./pages/NotFound/NotFound\";\r\nimport TimeConverter from \"./pages/TimeConverter/TimeConverter\";\r\nimport Generators from \"./pages/Generators/Generators\";\r\n\r\nconst appTheme = createTheme({\r\n    palette: {\r\n        themePrimary: \"#a8a8a8\",\r\n        themeLighterAlt: \"#070707\",\r\n        themeLighter: \"#1b1b1b\",\r\n        themeLight: \"#323232\",\r\n        themeTertiary: \"#656565\",\r\n        themeSecondary: \"#949494\",\r\n        themeDarkAlt: \"#b1b1b1\",\r\n        themeDark: \"#bdbdbd\",\r\n        themeDarker: \"#cecece\",\r\n        neutralLighterAlt: \"#4a4a4a\",\r\n        neutralLighter: \"#525252\",\r\n        neutralLight: \"#5e5e5e\",\r\n        neutralQuaternaryAlt: \"#656565\",\r\n        neutralQuaternary: \"#6b6b6b\",\r\n        neutralTertiaryAlt: \"#848484\",\r\n        neutralTertiary: \"#c8c8c8\",\r\n        neutralSecondary: \"#d0d0d0\",\r\n        neutralPrimaryAlt: \"#dadada\",\r\n        neutralPrimary: \"#ffffff\",\r\n        neutralDark: \"#f4f4f4\",\r\n        black: \"#f8f8f8\",\r\n        white: \"#424242\",\r\n    },\r\n});\r\n\r\ninitializeIcons();\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    let _DismissMenu: boolean = false;\r\n    const _AppItems: IAppRouteItem[] = [\r\n        {\r\n            title: \"Home\",\r\n            path: \"/\",\r\n            iconName: \"Home\",\r\n            component: Home,\r\n            showInDock: true,\r\n            showInMenu: false\r\n        },\r\n        {\r\n            title: \"Feedback\",\r\n            path: \"/tools/feedback\",\r\n            iconName: \"Feedback\",\r\n            component: Feedback,\r\n            showInDock: false,\r\n            showInMenu: true\r\n        },\r\n        {\r\n            title: \"URL Encoder\",\r\n            path: \"/tools/url-encoder\",\r\n            iconName: \"ChangeEntitlements\",\r\n            component: UrlEncoder,\r\n            showInDock: true,\r\n            showInMenu: true\r\n        },\r\n        {\r\n            title: \"Regex Tester\",\r\n            path: \"/tools/regex-tester\",\r\n            iconName: \"TestBeaker\",\r\n            component: Regex,\r\n            showInDock: true,\r\n            showInMenu: true\r\n        },\r\n        {\r\n            title: \"Time Converter\",\r\n            path: \"/tools/time-converter\",\r\n            iconName: \"WorldClock\",\r\n            component: TimeConverter,\r\n            showInDock: true,\r\n            showInMenu: true\r\n        },\r\n        {\r\n            title: \"Generators\",\r\n            path: \"/tools/generators\",\r\n            iconName: \"Code\",\r\n            component: Generators,\r\n            showInDock: true,\r\n            showInMenu: true\r\n        },\r\n        {\r\n            title: \"Page Not Found\",\r\n            path: \"\",\r\n            iconName: \"\",\r\n            component: NotFound,\r\n            showInDock: false,\r\n            showInMenu: false\r\n        }\r\n    ];\r\n\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n    let _onMouseDown = () => {\r\n        _DismissMenu = isMenuOpen;\r\n    }\r\n\r\n    let _onMouseUp = () => {\r\n        window.setTimeout(() => {\r\n            if (_DismissMenu) {\r\n                _DismissMenu = false;\r\n                setIsMenuOpen(false);\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    let _onMenuClicked = () => {\r\n        setIsMenuOpen(!isMenuOpen);\r\n    }\r\n\r\n    let _onAppItemClicked = () => {\r\n        if (isMenuOpen) {\r\n            setIsMenuOpen(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"mousedown\", _onMouseDown);\r\n        window.addEventListener(\"mouseup\", _onMouseUp);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"mousedown\", _onMouseDown);\r\n            window.removeEventListener(\"mouseup\", _onMouseUp);\r\n        };\r\n    })\r\n\r\n    return <>\r\n        <ThemeProvider theme={appTheme}>\r\n            <Stack className=\"App\" verticalFill>\r\n                <StackItem className=\"AppContent\" grow>\r\n                    <Switch>\r\n                        {_AppItems.map(i => {\r\n                            const hasPath = i.path.length > 0;\r\n                            return <Route key={i.path} exact={hasPath} path={hasPath ? i.path : undefined} component={() => <Title item={i} />} />;\r\n                        })}\r\n                    </Switch>\r\n                </StackItem>\r\n                <Menu isOpen={isMenuOpen} menuItems={_AppItems.filter(x => x.showInMenu)} onMenuItemClicked={_onAppItemClicked} />\r\n                <StackItem className=\"AppDock\" shrink>\r\n                    <Route path=\"*\" render={() => (<>\r\n                        <Dock dockItems={_AppItems.filter(x => x.showInDock)} onMenuClicked={_onMenuClicked} onMenuItemClicked={_onAppItemClicked} />\r\n                    </>)} />\r\n                </StackItem>\r\n            </Stack>\r\n        </ThemeProvider>\r\n    </>;\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router basename={`/${process.env.PUBLIC_URL}`}>\r\n            <App />\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
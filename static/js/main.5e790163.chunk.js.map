{"version":3,"sources":["components/Menu/Menu.tsx","components/Clock/Clock.tsx","components/Dock/Dock.tsx","pages/Home/Home.tsx","pages/Feedback/Feedback.tsx","pages/UrlEncoder/UrlEncoder.tsx","pages/Regex/Regex.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Menu","MenuItems","menuItems","onDockItemClicked","Stack","className","length","map","i","StackItem","grow","DefaultButton","iconProps","iconName","title","onClick","path","Text","variant","_UpdateTimeInterval","Clock","useState","hasClockData","hours","minutes","seconds","part","time","setTime","useEffect","updateTime","window","setInterval","clearInterval","now","Date","getHours","getMinutes","getSeconds","toString","padStart","Label","Dock","dockItems","onMenuClicked","horizontal","tokens","childrenGap","location","hash","align","Home","Feedback","horizontalAlign","href","target","UrlEncoder","mode","encodeValue","decodeValue","results","canProcess","state","setState","_canProcess","retVal","trim","TextField","label","multiline","value","rows","onChange","e","newValue","readOnly","Dropdown","dropdownWidth","selectedKey","item","newMode","key","options","text","PrimaryButton","disabled","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","err","error","message","Regex","pattern","input","replacement","RegExp","m","exec","JSON","stringify","test","replace","old","App","_DismissMenu","_AppItems","component","showInDock","showInMenu","isMenuOpen","setIsMenuOpen","_onMouseDown","_onMouseUp","setTimeout","_onMenuClicked","_onDockItemClicked","addEventListener","removeEventListener","verticalFill","exact","filter","x","shrink","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","initializeIcons","ReactDOM","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.5e790163.chunk.js","sourcesContent":["import { DefaultButton, Stack, StackItem, Text } from '@fluentui/react';\r\nimport React from 'react';\r\nimport './Menu.css';\r\n\r\ninterface IMenuProps {\r\n    menuItems: IMenuItem[];\r\n    onDockItemClicked: (item: IMenuItem) => void;\r\n}\r\n\r\nexport interface IMenuItem {\r\n    iconName: string;\r\n    title: string;\r\n    path: string;\r\n    showInDock: boolean;\r\n    showInMenu: boolean;\r\n}\r\n\r\nconst Menu: React.FunctionComponent<IMenuProps> = ({ menuItems: MenuItems, onDockItemClicked }) => {\r\n    return <Stack className=\"Menu\">\r\n        {MenuItems.length > 0 ? MenuItems.map(i => (<>\r\n            <StackItem className=\"MenuItem\" key={i.path} grow>\r\n                <DefaultButton iconProps={{ iconName: i.iconName }} title={i.title} onClick={() => onDockItemClicked(i)}>{i.title}</DefaultButton>\r\n            </StackItem>\r\n            <div className=\"MenuItemSeparator\" />\r\n        </>)) : <>\r\n            <StackItem className=\"MenuItem\" key=\"noItems\" grow>\r\n                <Text variant=\"medium\">No menu items to show</Text>\r\n            </StackItem>\r\n        </>}\r\n    </Stack>;\r\n}\r\n\r\nexport default Menu;","import { Label } from '@fluentui/react';\r\nimport * as React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport './Clock.css';\r\n\r\ninterface IClockState {\r\n    hasClockData: boolean;\r\n    hours: string;\r\n    minutes: string;\r\n    seconds: string;\r\n    part: \"AM\" | \"PM\";\r\n}\r\n\r\nlet _UpdateTimeInterval: number = -1;\r\n\r\nconst Clock: React.FunctionComponent<any> = () => {\r\n    const [time, setTime] = useState<IClockState>({\r\n        hasClockData: false,\r\n        hours: \"0\",\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n        part: \"AM\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        updateTime();\r\n        _UpdateTimeInterval = window.setInterval(updateTime, 1000);\r\n        return () => {\r\n            if (_UpdateTimeInterval >= 0) {\r\n                window.clearInterval(_UpdateTimeInterval);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    let updateTime = () => {\r\n        const now = new Date();\r\n        const hours = now.getHours();\r\n        const minutes = now.getMinutes();\r\n        const seconds = now.getSeconds();\r\n        setTime({\r\n            hasClockData: true,\r\n            hours: (hours === 0 ? 12 : hours > 12 ? hours - 12 : hours).toString(),\r\n            minutes: minutes.toString().padStart(2, \"0\"),\r\n            seconds: seconds.toString().padStart(2, \"0\"),\r\n            part: hours < 12 ? \"AM\" : \"PM\"\r\n        })\r\n    }\r\n\r\n    return <>\r\n        {time.hasClockData && <Label className=\"Clock\">{time.hours}:{time.minutes}:{time.seconds} {time.part}</Label>}\r\n    </>;\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\nimport './Dock.css';\r\nimport { DefaultButton, Stack, StackItem } from '@fluentui/react';\r\nimport { IMenuItem } from '../Menu/Menu';\r\nimport Clock from '../Clock/Clock';\r\n\r\ninterface IDockProps {\r\n    dockItems: IMenuItem[];\r\n    onMenuClicked: () => void;\r\n    onDockItemClicked: (item: IMenuItem) => void;\r\n}\r\n\r\nconst Dock: React.FunctionComponent<IDockProps> = ({ dockItems, onMenuClicked, onDockItemClicked }) => {\r\n    return <>\r\n        <Stack className=\"Dock\" horizontal tokens={{ childrenGap: 2 }}>\r\n            <StackItem>\r\n                <DefaultButton iconProps={{ iconName: \"WindowsLogo\" }} onClick={onMenuClicked} title=\"Menu\" />\r\n            </StackItem>\r\n\r\n            {dockItems.length > 0 && dockItems.map(i => (<StackItem key={i.path}>\r\n                <DefaultButton\r\n                    className={(window.location.hash === `#${i.path}`) ? \"active\" : \"\"}\r\n                    title={i.title}\r\n                    iconProps={{ iconName: i.iconName }}\r\n                    onClick={() => onDockItemClicked(i)} />\r\n            </StackItem>))}\r\n            <StackItem align=\"center\" >\r\n                <Clock />\r\n            </StackItem>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default Dock;","import React from 'react';\r\n\r\nexport interface IHomeProps {}\r\n\r\nconst Home: React.FunctionComponent<IHomeProps> = () => {\r\n    return <></>;\r\n}\r\n\r\nexport default Home;","import { DefaultButton, Stack, Text } from '@fluentui/react';\r\nimport React from 'react';\r\n\r\nconst Feedback: React.FunctionComponent = () => {\r\n\r\n    return <>\r\n        <Stack tokens={{ childrenGap: 30 }}>\r\n            <Stack tokens={{ childrenGap: 10 }}>\r\n                <Text variant=\"xLarge\">Bugs</Text>\r\n                <Text variant=\"medium\">If you have any issues using a tool on this site, please create an issue in the repo and tag it with as a bug.</Text>\r\n            </Stack>\r\n            <Stack tokens={{ childrenGap: 10 }}>\r\n                <Text variant=\"xLarge\">Ideas</Text>\r\n                <Text variant=\"medium\">If you find this site useful and want to share an idea for a tool that would make it more useful, please create an issue in the repo and tag it with as a request.</Text>\r\n            </Stack>\r\n            <Stack tokens={{ childrenGap: 10 }} horizontalAlign=\"start\">\r\n                <Text variant=\"medium\">You will need to have a GitHub account to create the feedback item. (Don't worry it's completely free)</Text>\r\n                <DefaultButton href=\"https://github.com/tpalacino/tpalacino.github.io/issues/new\" target=\"_blank\" data-intercaption=\"off\">GitHub Repo</DefaultButton>\r\n            </Stack>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default Feedback;","import React, { useState } from \"react\";\r\nimport { Dropdown, IDropdownOption, PrimaryButton, Stack, TextField } from \"@fluentui/react\";\r\n\r\ntype UrlEncoderMode = 'decode' | 'decodeComponent' | 'encode' | 'encodeComponent';\r\n\r\ninterface IUrlEncoderState {\r\n    mode: UrlEncoderMode;\r\n    encodeValue: string;\r\n    decodeValue: string;\r\n    results: string;\r\n    canProcess: boolean;\r\n}\r\n\r\nconst UrlEncoder: React.FunctionComponent = () => {\r\n\r\n    const [state, setState] = useState<IUrlEncoderState>({\r\n        mode: 'decode',\r\n        encodeValue: '',\r\n        decodeValue: '',\r\n        results: '',\r\n        canProcess: false\r\n    });\r\n\r\n    let _canProcess = (mode: UrlEncoderMode, encodeValue?: string, decodeValue?: string): boolean => {\r\n        let retVal = false;\r\n        switch (mode) {\r\n            case \"decode\":\r\n            case \"decodeComponent\": {\r\n                retVal = decodeValue ? decodeValue.trim().length > 0 : false;\r\n                break;\r\n            }\r\n            case \"encode\":\r\n            case \"encodeComponent\": {\r\n                retVal = encodeValue ? encodeValue.trim().length > 0 : false;\r\n                break;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    let _onEncodedChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            encodeValue: newValue,\r\n            canProcess: _canProcess(state.mode, newValue, state.decodeValue),\r\n            results: ''\r\n        });\r\n    }\r\n\r\n    let _onDecodedChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            decodeValue: newValue,\r\n            canProcess: _canProcess(state.mode, state.encodeValue, newValue),\r\n            results: ''\r\n        });\r\n    }\r\n\r\n    let _onModeChanged = (e?: any, item?: IDropdownOption) => {\r\n        let newMode = state.mode;\r\n        if (item && item.key) {\r\n            newMode = item.key as UrlEncoderMode;\r\n        }\r\n        setState({\r\n            ...state,\r\n            mode: newMode,\r\n            canProcess: _canProcess(newMode, state.encodeValue, state.decodeValue),\r\n            results: ''\r\n        });\r\n    }\r\n\r\n    let _Process = () => {\r\n        if (state.canProcess) {\r\n            let results: string = '';\r\n            try {\r\n                switch (state.mode) {\r\n                    case \"decode\": {\r\n                        results = decodeURI(state.decodeValue);\r\n                        break;\r\n                    }\r\n                    case \"decodeComponent\": {\r\n                        results = decodeURIComponent(state.decodeValue);\r\n                        break;\r\n                    }\r\n                    case \"encode\": {\r\n                        results = encodeURI(state.encodeValue);\r\n                        break;\r\n                    }\r\n                    case \"encodeComponent\": {\r\n                        results = encodeURIComponent(state.encodeValue);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (err) {\r\n                const error = err as any;\r\n                if (error && error.message) {\r\n                    results = error.message;\r\n                }\r\n                else {\r\n                    results = `${error}`;\r\n                }\r\n            }\r\n            setState({\r\n                ...state,\r\n                results: results ? results : ''\r\n            });\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Stack className=\"UrlEncoder\" tokens={{ childrenGap: 20 }}>\r\n            {(state.mode === 'decode' || state.mode === 'decodeComponent') && <>\r\n                <TextField label=\"Decode\" multiline value={state.decodeValue} rows={10} onChange={_onDecodedChanged} />\r\n            </>}\r\n            {(state.mode === 'encode' || state.mode === 'encodeComponent') && <>\r\n                <TextField label=\"Encode\" multiline value={state.encodeValue} rows={10} onChange={_onEncodedChanged} />\r\n            </>}\r\n            <TextField label=\"Results\" multiline value={state.results} rows={10} readOnly />\r\n            <Stack horizontal grow tokens={{ childrenGap: 10 }}>\r\n                <Dropdown\r\n                    dropdownWidth='auto'\r\n                    selectedKey={state.mode}\r\n                    onChange={_onModeChanged}\r\n                    options={[\r\n                        {\r\n                            key: \"decode\",\r\n                            text: \"Decode URI\"\r\n                        },\r\n                        {\r\n                            key: \"decodeComponent\",\r\n                            text: \"Decode URI Component\"\r\n                        },\r\n                        {\r\n                            key: \"encode\",\r\n                            text: \"Encode URI\"\r\n                        },\r\n                        {\r\n                            key: \"encodeComponent\",\r\n                            text: \"Encode URI Component\"\r\n                        }\r\n                    ]} />\r\n                <PrimaryButton text=\"Process\" disabled={!state.canProcess} onClick={_Process} />\r\n            </Stack>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default UrlEncoder;","import { Dropdown, IDropdownOption, PrimaryButton, Stack, TextField } from \"@fluentui/react\";\r\nimport React, { useState } from \"react\";\r\n\r\ntype RegexMode = 'exec' | 'test' | 'replace';\r\n\r\ninterface IRegex {\r\n    mode: RegexMode;\r\n    pattern: string;\r\n    input: string;\r\n    replacement: string;\r\n    results: string;\r\n    canProcess: boolean;\r\n}\r\n\r\nconst Regex: React.FunctionComponent = () => {\r\n\r\n    const [state, setState] = useState<IRegex>({\r\n        mode: 'exec',\r\n        pattern: '',\r\n        input: '',\r\n        replacement: '',\r\n        results: '',\r\n        canProcess: false\r\n    });\r\n\r\n    let _canProcess = (mode: RegexMode, pattern?: string, replacement?: string): boolean => {\r\n        let retVal = false;\r\n        switch (mode) {\r\n            case \"test\":\r\n            case \"exec\": {\r\n                retVal = pattern ? pattern.trim().length > 0 : false;\r\n                break;\r\n            }\r\n            case \"replace\": {\r\n                retVal = (pattern ? pattern.trim().length > 0 : false) && (replacement ? replacement.trim().length > 0 : false);\r\n                break;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    let _onPatternChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            pattern: newValue,\r\n            canProcess: _canProcess(state.mode, newValue, state.replacement)\r\n        });\r\n    }\r\n\r\n    let _onInputChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            input: newValue\r\n        });\r\n    }\r\n\r\n    let _onReplacementChanged = (e?: any, value?: string) => {\r\n        const newValue = value || '';\r\n        setState({\r\n            ...state,\r\n            replacement: newValue,\r\n            canProcess: _canProcess(state.mode, state.pattern, newValue)\r\n        });\r\n    }\r\n\r\n    let _onModeChanged = (e?: any, item?: IDropdownOption) => {\r\n        let newMode = state.mode;\r\n        if (item && item.key) {\r\n            newMode = item.key as RegexMode;\r\n        }\r\n        setState({\r\n            ...state,\r\n            mode: newMode,\r\n            canProcess: _canProcess(newMode, state.pattern, state.replacement)\r\n        });\r\n    }\r\n\r\n    let _Process = () => {\r\n        if (state.canProcess) {\r\n            let results: string = '';\r\n            try {\r\n                const pattern = new RegExp(state.pattern);\r\n                switch (state.mode) {\r\n                    case \"exec\": {\r\n                        const m = pattern.exec(state.input);\r\n                        if (m) {\r\n                            results = JSON.stringify(m, null, 4);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"test\": {\r\n                        results = `${pattern.test(state.input)}`;\r\n                        break;\r\n                    }\r\n                    case \"replace\": {\r\n                        results = state.input.replace(pattern, state.replacement);\r\n                    }\r\n                }\r\n                \r\n            }\r\n            catch (err) {\r\n                const error = err as any;\r\n                if (error && error.message) {\r\n                    results = error.message;\r\n                }\r\n                else {\r\n                    results = `${error}`;\r\n                }\r\n            }\r\n            setState(old => {\r\n                return {\r\n                    ...old,\r\n                    results: results ? results : ''\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Stack className=\"Regex\" tokens={{ childrenGap: 20 }}>\r\n            <TextField label=\"Pattern\" multiline value={state.pattern} rows={5} onChange={_onPatternChanged} />\r\n            <TextField label=\"Input\" multiline value={state.input} rows={5} onChange={_onInputChanged} />\r\n            {state.mode === 'replace' && <>\r\n                <TextField label=\"Replacement\" multiline value={state.replacement} rows={5} onChange={_onReplacementChanged} />\r\n            </>}\r\n            <TextField label=\"Results\" multiline value={state.results} rows={10} readOnly />\r\n            <Stack horizontal grow tokens={{ childrenGap: 10 }}>\r\n                <Dropdown\r\n                    selectedKey={state.mode}\r\n                    onChange={_onModeChanged}\r\n                    options={[\r\n                        {\r\n                            key: \"exec\",\r\n                            text: \"Match\"\r\n                        },\r\n                        {\r\n                            key: \"test\",\r\n                            text: \"Is Match\"\r\n                        },\r\n                        {\r\n                            key: \"replace\",\r\n                            text: \"Replace\"\r\n                        }\r\n                    ]} />\r\n                <PrimaryButton text=\"Process\" disabled={!state.canProcess} onClick={_Process} />\r\n            </Stack>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default Regex;","import React, { useEffect, useState } from \"react\";\r\nimport { Route, RouteComponentProps, Switch } from \"react-router\";\r\nimport { Stack, StackItem } from \"@fluentui/react\";\r\nimport \"./App.css\";\r\nimport Menu, { IMenuItem } from './components/Menu/Menu';\r\nimport Dock from './components/Dock/Dock';\r\nimport Home from \"./pages/Home/Home\";\r\nimport Feedback from \"./pages/Feedback/Feedback\";\r\nimport UrlEncoder from \"./pages/UrlEncoder/UrlEncoder\";\r\nimport Regex from \"./pages/Regex/Regex\";\r\n\r\ninterface IAppItem extends IMenuItem {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    let _DismissMenu: boolean = false;\r\n    let _AppItems: IAppItem[] = [\r\n        {\r\n            title: \"Home\",\r\n            path: \"/\",\r\n            iconName: \"Home\",\r\n            component: Home,\r\n            showInDock: true,\r\n            showInMenu: false\r\n        },\r\n        {\r\n            title: \"Feedback\",\r\n            path: \"/tools/feedback\",\r\n            iconName: \"Feedback\",\r\n            component: Feedback,\r\n            showInDock: false,\r\n            showInMenu: true\r\n        },\r\n        {\r\n            title: \"URL Encoder\",\r\n            path: \"/tools/url-encoder\",\r\n            iconName: \"ChangeEntitlements\",\r\n            component: UrlEncoder,\r\n            showInDock: true,\r\n            showInMenu: true\r\n        },\r\n        {\r\n            title: \"Regex Tester\",\r\n            path: \"/tools/regex-tester\",\r\n            iconName: \"TestBeaker\",\r\n            component: Regex,\r\n            showInDock: true,\r\n            showInMenu: true\r\n        }\r\n    ];\r\n\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n    let _onMouseDown = () => {\r\n        _DismissMenu = isMenuOpen;\r\n    }\r\n\r\n    let _onMouseUp = () => {\r\n        window.setTimeout(() => {\r\n            if (_DismissMenu) {\r\n                _DismissMenu = false;\r\n                setIsMenuOpen(false);\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    let _onMenuClicked = () => {\r\n        setIsMenuOpen(!isMenuOpen);\r\n    }\r\n\r\n    let _onDockItemClicked = (item: IMenuItem) => {\r\n        window.location.hash = `#${item.path}`;\r\n        if (isMenuOpen) {\r\n            setIsMenuOpen(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"mousedown\", _onMouseDown);\r\n        window.addEventListener(\"mouseup\", _onMouseUp);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"mousedown\", _onMouseDown);\r\n            window.removeEventListener(\"mouseup\", _onMouseUp);\r\n        };\r\n    })\r\n\r\n    return <>\r\n        <Stack className=\"App\" verticalFill>\r\n            <StackItem className=\"AppContent\" grow>\r\n                <Switch>\r\n                    {_AppItems.map(i => {\r\n                        return <Route key={i.path} exact path={i.path} component={i.component} />;\r\n                    })}\r\n                </Switch>\r\n            </StackItem>\r\n            {isMenuOpen && <Menu menuItems={_AppItems.filter(x => x.showInMenu)} onDockItemClicked={_onDockItemClicked} />}\r\n            <StackItem className=\"AppDock\" shrink>\r\n                <Route path=\"*\" render={() => (<>\r\n                    <Dock dockItems={_AppItems.filter(x => x.showInDock)} onMenuClicked={_onMenuClicked} onDockItemClicked={_onDockItemClicked} />\r\n                </>)} />\r\n            </StackItem>\r\n        </Stack>\r\n    </>;\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { initializeIcons, ThemeProvider } from '@fluentui/react';\r\nimport { createTheme } from \"@fluentui/style-utilities\";\r\n\r\nconst appTheme = createTheme({\r\n    palette: {\r\n        themePrimary: \"#a8a8a8\",\r\n        themeLighterAlt: \"#070707\",\r\n        themeLighter: \"#1b1b1b\",\r\n        themeLight: \"#323232\",\r\n        themeTertiary: \"#656565\",\r\n        themeSecondary: \"#949494\",\r\n        themeDarkAlt: \"#b1b1b1\",\r\n        themeDark: \"#bdbdbd\",\r\n        themeDarker: \"#cecece\",\r\n        neutralLighterAlt: \"#4a4a4a\",\r\n        neutralLighter: \"#525252\",\r\n        neutralLight: \"#5e5e5e\",\r\n        neutralQuaternaryAlt: \"#656565\",\r\n        neutralQuaternary: \"#6b6b6b\",\r\n        neutralTertiaryAlt: \"#848484\",\r\n        neutralTertiary: \"#c8c8c8\",\r\n        neutralSecondary: \"#d0d0d0\",\r\n        neutralPrimaryAlt: \"#dadada\",\r\n        neutralPrimary: \"#ffffff\",\r\n        neutralDark: \"#f4f4f4\",\r\n        black: \"#f8f8f8\",\r\n        white: \"#424242\",\r\n    },\r\n});\r\n\r\ninitializeIcons();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <ThemeProvider theme={appTheme}>\r\n                <App />\r\n            </ThemeProvider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}